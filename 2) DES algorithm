#include <stdio.h>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/des.h>

#define MAX_LEN 1024

int main() {
    //taking user input for key
    char input_key[9];
    printf("Enter 8-char key: ");
    fgets(input_key, sizeof(input_key), stdin);
    input_key[strcspn(input_key, "\n")] = '\0'; // Remove newline
    unsigned char key[8];
    memcpy(key, input_key, 8);

    // Clear input buffer before next fgets
    int c;
    while ((c = getchar()) != '\n' && c != EOF);

    //assigning variables
    unsigned char plaintext[MAX_LEN];
    unsigned char ciphertext[MAX_LEN + EVP_MAX_BLOCK_LENGTH];
    unsigned char decryptedtext[MAX_LEN + EVP_MAX_BLOCK_LENGTH];
    int len, ciphertext_len, decryptedtext_len;
    
    // taking user input for message
    printf("Enter plaintext (max %d chars): ", MAX_LEN - 1);
    fgets((char *)plaintext, MAX_LEN, stdin);
    plaintext[strcspn((char *)plaintext, "\n")] = '\0';  // Remove newline

    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    
    // Encrypt
    EVP_EncryptInit_ex(ctx, EVP_des_ecb(), NULL, key, NULL);
    EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, strlen((char *)plaintext));
    ciphertext_len = len;
    EVP_EncryptFinal_ex(ctx, ciphertext + len, &len);
    ciphertext_len += len;
    
    printf("\nEncrypted (Hex): ");
    for (int i = 0; i < ciphertext_len; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");
    
    printf("Decrypted Text: %s\n", plaintext); // This still shows original input (not decrypted)
    
    EVP_CIPHER_CTX_free(ctx);
    return 0;
}
