#include <stdio.h>
#include <stdlib.h>

// Efficient (base^exp) mod mod
long long mod_exp(long long base, long long exp, long long mod) {
	long long result = 1;
	base %= mod;
	while (exp > 0) {
		if (exp & 1)
			result = (result * base) % mod;
		exp >>= 1;
		base = (base * base) % mod;
		}
	return result;
}

long long mod_inverse(int e, int phi){
    for(int d = 0; d < phi; d++){
        if((d * e) % phi == 1)
            return d;
    }
    return -1;
}

int main() {
	
	long long p, g;
	printf("enter prime number p: ");
	scanf("%d", &p);
	printf("enter primitive module g (<p): ");
	scanf("%d", &g);
	
	long long private_a;
	printf("enter private key for a (<g)");
	scanf("%d", &private_a);
	
	long long public_a = mod_exp(g, private_a, p);
	printf("public key of a: {%d, %d, %d}\n", p, g, public_a);
	
	long long plaintext, k;
	printf("enter plaintext (<p): ");
	scanf("%d", &plaintext);
	printf("enter k (<p): ");
	scanf("%d", &k);
	
	long long K = mod_exp(public_a, k, p);
	long long c1 = mod_exp(g, k, p);
	long long c2 = (K * plaintext) % p;
	
	printf("encrypted ciphetext: (c1, c2) = (%d, %d)\n", c1, c2);
	
	long long KK = mod_exp(c1, private_a, p);
	long long decrypted_text = (c2 * mod_inverse(KK, p)) % p;
	
	printf("decrypted text : %d\n", decrypted_text);
	return 0;	
}
