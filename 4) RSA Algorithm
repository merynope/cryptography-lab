#include <stdio.h>
#include <math.h>

// Function to compute gcd
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// Function to compute modular inverse of e mod phi
int modInverse(int e, int phi) {
    for (int d = 1; d < phi; d++) {
        if ((d * e) % phi == 1)
            return d;
    }
    return -1;
}

// Function to compute (base^exp) % mod
int modPow(int base, int exp, int mod) {
    int result = 1;
    for (int i = 0; i < exp; i++)
        result = (result * base) % mod;
    return result;
}

int main() {
    int p = 3, q = 11;
    int n = p * q;             // n = 33
    int phi = (p - 1) * (q - 1); // phi = 20

    int e = 3;
    while (gcd(e, phi) != 1)
        e++;

    int d = modInverse(e, phi); // Private key
    if (d == -1) {
        printf("Modular inverse not found.\n");
        return 1;
    }

    int msg;
    printf("Enter message (as integer < %d): ", n);
    scanf("%d", &msg);

    int cipher = modPow(msg, e, n);
    int decrypted = modPow(cipher, d, n);

    printf("Public Key: (%d, %d)\n", e, n);
    printf("Private Key: (%d, %d)\n", d, n);
    printf("Encrypted: %d\n", cipher);
    printf("Decrypted: %d\n", decrypted);

    return 0;
}
