#include <stdio.h>
#include <stdlib.h>
#include <string.h>

long long gcd(long long a, long long b) {
  while (b != 0) {
    long long temp = a % b;
    a = b;
    b = temp;
  }
  return a;
}

long long mod_exp(long long base, long long exp, long long mod) {
  long long result = 1;
  base = base % mod;
  while (exp > 0) {
    if (exp % 2)
    result = (result * base) % mod;
    exp >>= 1;
    base = (base * base) % mod;
  }
  return result;
}

long long mod_inverse(long long e, long long phi) {
  long long t = 0, newt = 1;
  long long r = phi, newr = e;
  while (newr != 0) {
    long long quotient = r / newr;
    long long temp = newt;
    newt = t - quotient * newt;
    t = temp;
        temp = newr;
        newr = r - quotient * newr;
        r = temp;
  }
  if (r > 1) return -1;
  if (t < 0) t += phi;
  return t;
}

int main() {
  long long p, q, n, phi, e, d;
  // Input two primes
  printf("Enter prime number p: ");
  scanf("%lld", &p);
  printf("Enter prime number q: ");
  scanf("%lld", &q);
  
  n = p * q;
  phi = (p - 1) * (q - 1);
  
  // Choose e
  for (e = 2; e < phi; e++) {
      if (gcd(e, phi) == 1)
          break;
  }
  
  d = mod_inverse(e, phi);
  if (d == -1) {
      printf("Modular inverse does not exist.\n");
      return 1;
  }
  
  printf("\nPublic Key (e, n): (%lld, %lld)", e, n);
  printf("\nPrivate Key (d, n): (%lld, %lld)\n", d, n);
  
  // Input message
  char msg[128];
  printf("\nEnter a message to encrypt (max 127 chars): ");
  getchar();  // clear buffer
  fgets(msg, sizeof(msg), stdin);
  msg[strcspn(msg, "\n")] = '\0';
  
  // Encrypt message character by character
  long long encrypted[128], decrypted[128];
  printf("\nEncrypted Message (numeric): ");
  for (int i = 0; i < strlen(msg); i++) {
      encrypted[i] = mod_exp(msg[i], e, n);
      printf("%lld ", encrypted[i]);
  }
  
  // Decrypt message
  printf("\nDecrypted Message: ");
  for (int i = 0; i < strlen(msg); i++) {
      decrypted[i] = mod_exp(encrypted[i], d, n);
      printf("%c", (char)decrypted[i]);
  }
  printf("\n");
  
  return 0;
}
